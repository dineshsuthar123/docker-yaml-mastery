version: '3.8'

services:
  # Jupyter Lab for Data Science
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter-lab
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "your-token"
    volumes:
      - ./notebooks:/home/jovyan/work
      - jupyter_data:/home/jovyan
    networks:
      - datascience

  # Apache Airflow for workflow orchestration
  airflow-webserver:
    image: apache/airflow:2.6.3
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - postgres
    networks:
      - datascience

  airflow-scheduler:
    image: apache/airflow:2.6.3
    container_name: airflow-scheduler
    command: scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - postgres
    networks:
      - datascience

  # MLflow for experiment tracking
  mlflow:
    image: python:3.9
    container_name: mlflow
    ports:
      - "5000:5000"
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow
               --default-artifact-root ./mlruns --host 0.0.0.0"
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      - postgres
    networks:
      - datascience

  # Apache Spark for big data processing
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    ports:
      - "8081:8080"
      - "7077:7077"
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
    volumes:
      - ./spark-apps:/opt/spark-apps
    networks:
      - datascience

  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    ports:
      - "8082:8081"
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
    depends_on:
      - spark-master
    networks:
      - datascience

  spark-worker-2:
    image: bitnami/spark:latest
    container_name: spark-worker-2
    ports:
      - "8083:8081"
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
    depends_on:
      - spark-master
    networks:
      - datascience

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15
    container_name: postgres-ds
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-ds-dbs.sql:/docker-entrypoint-initdb.d/init-ds-dbs.sql
    networks:
      - datascience

  # MinIO for data lake storage
  minio:
    image: minio/minio
    container_name: minio-datalake
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - datascience

  # Apache Superset for data visualization
  superset:
    image: apache/superset:latest
    container_name: superset
    ports:
      - "8088:8088"
    environment:
      SUPERSET_SECRET_KEY: your-secret-key
      SQLALCHEMY_DATABASE_URI: postgresql://superset:superset@postgres:5432/superset
    depends_on:
      - postgres
    volumes:
      - superset_data:/app/superset_home
    networks:
      - datascience

  # Apache Kafka for streaming data
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-ds
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - datascience

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-ds
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - datascience

volumes:
  jupyter_data:
  mlflow_data:
  postgres_data:
  minio_data:
  superset_data:

networks:
  datascience:
    driver: bridge
