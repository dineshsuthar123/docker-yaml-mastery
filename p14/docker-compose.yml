services:
  # Traefik Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=admin@example.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - proxy
      - internal

  # Multi-tier Web Application
  web-tier1:
    image: nginx:alpine
    container_name: web-tier1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web1.rule=Host(`web1.localhost`)"
      - "traefik.http.routers.web1.entrypoints=web"
      - "traefik.http.services.web1.loadbalancer.server.port=80"
    volumes:
      - ./web1:/usr/share/nginx/html
    networks:
      - internal

  web-tier2:
    image: nginx:alpine
    container_name: web-tier2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web2.rule=Host(`web2.localhost`)"
      - "traefik.http.routers.web2.entrypoints=web"
      - "traefik.http.services.web2.loadbalancer.server.port=80"
    volumes:
      - ./web2:/usr/share/nginx/html
    networks:
      - internal

  # API Gateway with rate limiting
  api-gateway:
    image: kong:latest
    container_name: kong-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong.yml:/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
    networks:
      - internal

  # Multiple application instances for load balancing
  app1:
    build: ./app
    container_name: app-instance-1
    environment:
      - INSTANCE_ID=1
      - DB_URL=postgresql://app:app@postgres-master:5432/appdb
      - REDIS_URL=redis://redis-master:6379
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - internal

  app2:
    build: ./app
    container_name: app-instance-2
    environment:
      - INSTANCE_ID=2
      - DB_URL=postgresql://app:app@postgres-master:5432/appdb
      - REDIS_URL=redis://redis-master:6379
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - internal

  app3:
    build: ./app
    container_name: app-instance-3
    environment:
      - INSTANCE_ID=3
      - DB_URL=postgresql://app:app@postgres-master:5432/appdb
      - REDIS_URL=redis://redis-master:6379
    depends_on:
      - postgres-master
      - redis-master
    networks:
      - internal

  # Database with read replicas
  postgres-master:
    image: postgres:15
    container_name: postgres-master
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator_password
    volumes:
      - postgres_master_data:/var/lib/postgresql/data
      - ./postgresql-master.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - internal

  postgres-replica1:
    image: postgres:15
    container_name: postgres-replica1
    environment:
      POSTGRES_MASTER_SERVICE: postgres-master
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator_password
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
      - ./setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    depends_on:
      - postgres-master
    networks:
      - internal

  # Redis Cluster
  redis-master:
    image: redis:7-alpine
    container_name: redis-master
    command: redis-server --appendonly yes --replica-announce-ip redis-master
    volumes:
      - redis_master_data:/data
    networks:
      - internal

  redis-replica1:
    image: redis:7-alpine
    container_name: redis-replica1
    command: redis-server --appendonly yes --replicaof redis-master 6379
    depends_on:
      - redis-master
    networks:
      - internal

  # Monitoring Stack
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - internal

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - internal

  # Centralized logging
  fluentd:
    build: ./fluentd
    container_name: fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    depends_on:
      - elasticsearch
    networks:
      - internal

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - internal

volumes:
  letsencrypt:
  postgres_master_data:
  postgres_replica1_data:
  redis_master_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  proxy:
    external: true
  internal:
    driver: bridge

