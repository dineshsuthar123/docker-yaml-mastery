version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
    depends_on:
      - web1
      - web2
      - api
    networks:
      - frontend
      - backend

  # Load balanced web servers
  web1:
    image: nginx:alpine
    container_name: web-server-1
    volumes:
      - ./web:/usr/share/nginx/html:ro
    environment:
      - SERVER_ID=1
    networks:
      - frontend

  web2:
    image: nginx:alpine
    container_name: web-server-2
    volumes:
      - ./web:/usr/share/nginx/html:ro
    environment:
      - SERVER_ID=2
    networks:
      - frontend

  # API Gateway
  api:
    image: node:18-alpine
    container_name: api-gateway
    working_dir: /app
    volumes:
      - ./api:/app
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - ORDER_SERVICE_URL=http://order-service:3003
    command: sh -c "npm install && npm start"
    depends_on:
      - auth-service
      - user-service
      - order-service
    networks:
      - frontend
      - backend

  # Microservices
  auth-service:
    image: node:18-alpine
    container_name: auth-service
    working_dir: /app
    volumes:
      - ./services/auth:/app
    environment:
      - NODE_ENV=production
      - JWT_SECRET=your-secret-key
      - DB_URL=mongodb://mongo:27017/auth
    command: sh -c "npm install && npm start"
    depends_on:
      - mongo
    networks:
      - backend

  user-service:
    image: node:18-alpine
    container_name: user-service
    working_dir: /app
    volumes:
      - ./services/users:/app
    environment:
      - NODE_ENV=production
      - DB_URL=postgresql://postgres:password@postgres:5432/users
    command: sh -c "npm install && npm start"
    depends_on:
      - postgres
    networks:
      - backend

  order-service:
    image: node:18-alpine
    container_name: order-service
    working_dir: /app
    volumes:
      - ./services/orders:/app
    environment:
      - NODE_ENV=production
      - DB_URL=postgresql://postgres:password@postgres:5432/orders
      - REDIS_URL=redis://redis:6379
    command: sh -c "npm install && npm start"
    depends_on:
      - postgres
      - redis
    networks:
      - backend

  # Databases
  mongo:
    image: mongo:6
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  postgres:
    image: postgres:15
    container_name: postgresql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - backend

  # Monitoring
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring

volumes:
  mongo_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge

